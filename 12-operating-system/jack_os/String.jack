// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field char data;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if ( maxLength = 0 ) {
            let maxLength = 1;
        }
        let data = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(data);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let data[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let data[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let data[length] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, value, d;
        var bool neg;
        let i = 0;
        let value = 0;
        let neg = false;
        if (charAt(i) = 45) {
            let i = i + 1;
            let neg = true;
        }
        while (i < length) {
            let d = charAt(i);
            let value = (value * 10) + (d-48);
            let i = i + 1;
        }
        if (neg = true) {
            return -value;
        }
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i;
        let i = 0;
        let length = 0; // clear string
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        do intToString(val);
        return;
    }

    function char intToChar(int val) {
        return val + 48;
    }

    method void intToString(int val) {
        var int q, r, i;
        var char c;
        var String temp;
        var String str;

        let q = val / 10;
        let r = val - (q*10);
        let c = String.intToChar(r);
        if (val < 10) {
            do appendChar(c);
            return;
        }
        else {
            do intToString(q);
            do appendChar(c);
            return;
            }
        }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
