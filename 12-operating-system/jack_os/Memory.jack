// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0; // next
        let heap[1] = 14335; // heap size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var int value;
        let value = ram[address];
        return value;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int heapIdx, block, currSize;

        let heapIdx = 0;
        let block = freeList[heapIdx];
        let currSize = freeList[heapIdx+1];
        // while (size + 2 > currSize) {
            // return block;
        // }
        // get new base address
        let block = freeList[heapIdx] + freeList[heapIdx+1] - size + 2;
        let freeList[block - 1] = size;
        let freeList[heapIdx+1] = freeList[heapIdx+1] - 2 - size;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        
        return;
    }    
}
