// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static bool black;
    static bool white;
    static bool currColor;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let black = true;
        let white = false;
        let currColor = black;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (~(i>(24575-16384))) {
            let screen[i] = white;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currColor = b;
        return;
    }

    function void drawPixel(int x, int y) {
        var int address;
        var int mask;
        let address = (y*32) + (x/16);
        let mask = Math.twoToTheFn(x & 15);
        if (currColor) {
            let screen[address] = screen[address] | mask;
        }
        else {
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, yIncrement, temp;
        let a = 0;
        let b = 0;
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        // vertical line
        if (x1 = x2) {
            if (y2 < y1) {
                let temp = y2;
                let y2 = y1;
                let y1 = temp;
            }
            while ( ~((y1 + a) > y2) ) {
                let a = a + 1;
                do Screen.drawPixel(x1, y1 + a);
            }
            return;
        }
        // horizontal line
        if (y1 = y2) {
            while ( ~((x1 + b) > x2) ) {
                let b = b + 1;
                do Screen.drawPixel(x1 + b, y1);
            }
            return;
        }


        if (y1 < y2) {
            let yIncrement = 1; 
        }
        else {
            let yIncrement = -1;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;
        while( ~(a > dx) & (((yIncrement = 1) & ~(b > dy)) | ((yIncrement = -1) & ~(b < dy))) ) {

            do Screen.drawPixel(x1+a, y1+b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + (dy*yIncrement);
            }
            else {
                let b = b + yIncrement;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int a;
        let a = 0;
        // walk up from y1 drawing horizontal lines
        while ( ~((y1+a) > y2) ) {
            do Screen.drawLine(x1, y1+a, x2, y1+a);
            let a = a + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, xOffset, yOffset, diff;

        let dy = -r;
        while ( (~(dy < -r)) & (~(dy>r)) ) {
            let diff = Math.sqrt((r*r) - (dy*dy));
            let xOffset = x - diff;
            let yOffset = x + diff;
            do Screen.drawLine(xOffset, y + dy, yOffset, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
